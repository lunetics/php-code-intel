ARG PHP_VERSION=8.3
FROM php:${PHP_VERSION}-cli-alpine

# Install system dependencies
RUN apk add --no-cache \
    git \
    unzip \
    libzip-dev \
    autoconf \
    g++ \
    make \
    linux-headers

# Install PHP extensions
RUN docker-php-ext-install \
    zip \
    opcache \
    pcntl

# Install Xdebug for coverage (optional)
RUN pecl install xdebug && \
    docker-php-ext-enable xdebug

# Install Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Configure PHP
RUN cp "/usr/local/etc/php/php.ini-development" "/usr/local/etc/php/php.ini" && \
    echo "memory_limit=-1" >> "/usr/local/etc/php/php.ini" && \
    echo "error_reporting=E_ALL" >> "/usr/local/etc/php/php.ini" && \
    echo "display_errors=On" >> "/usr/local/etc/php/php.ini" && \
    echo "display_startup_errors=On" >> "/usr/local/etc/php/php.ini"

# Configure Xdebug
RUN echo "xdebug.mode=develop,debug,coverage" >> "/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini" && \
    echo "xdebug.client_host=host.docker.internal" >> "/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini" && \
    echo "xdebug.start_with_request=yes" >> "/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini"

WORKDIR /app

# Create non-root user
RUN adduser -D -u 1000 developer && \
    chown -R developer:developer /app

# Copy composer files first for dependency caching
COPY --chown=developer:developer composer.json composer.lock* ./

# Install dependencies (if composer.json exists)
RUN if [ -f composer.json ]; then composer install --no-scripts --no-interaction; fi

# Copy project files
COPY --chown=developer:developer . .

USER developer